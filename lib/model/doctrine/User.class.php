<?php

/**
 * User
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    timehive
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class User extends BaseUser
{

    /**
     * Returns all Time-Entries of the user for a given date
     *
     * @param TimeStamp $date The date as a unix timestamp
     * @return DoctrineCollection
     */
    public function getTimeEntriesByDay($date)
    {
        $read_date = date('Y-m-d H:i:s',
                        mktime(0, 0, 0,
                                date('n', $date),
                                date('j', $date),
                                date('Y', $date)
                        )
        );

        $result = Doctrine_Query::create()->from('TimeLogItem ti')
                        ->where('ti.user_id=? AND ti.itemdate=?',
                                array($this->getId(), $read_date)
                        )
                        ->execute();

        return $result;
    }

    public function getProjectRoles($project_id)
    {
        return Doctrine_Query::create()
                        ->from('Role r')
                        ->innerJoin('r.ProjectUsers pu')
                        ->where('pu.user_id=? AND pu.project_id=?', array($this->id, $project_id))
                        ->execute();
    }

    public function hasProjectRole($role_name, $project_id)
    {
        $roles = Doctrine_Query::create()
                        ->from('Role r')
                        ->innerJoin('r.ProjectUsers pu')
                        ->where('pu.user_id=? AND pu.project_id=?', array($this->id, $project_id))
                        ->andWhere('r.name=?', array($role_name))
                        ->execute();

        return count($roles) != 0;
    }

    public function hasProjectCredential($credential_name, $project_id)
    {
        $roles = Doctrine_Query::create()
                        ->from('Role r')
                        ->innerJoin('r.ProjectUsers pu')
                        ->innerJoin('r.Credentials c')
                        ->where('pu.user_id=? AND pu.project_id=?', array($this->id, $project_id))
                        ->andWhere('c.name=?', array($credential_name))
                        ->execute();

        return count($roles) != 0;
    }

    public function __toString()
    {
        return $this->first_name." ".$this->last_name." (".$this->username.")";
    }
}
